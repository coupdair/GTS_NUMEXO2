#include "gts.h"

XMMRegs XMMRegsDriver;

XSPI XSPIDriver;

XMMRegs_Config XMMRegs_ConfigTable[] = {{0,0}};
/*
XSPI_Config XSPI_ConfigTable[] =
{
	{
		XPAR_SPI_IF_DEVICE_ID,
		XPAR_SPI_IF_BASEADDR,
                XPAR_SPI_IF_FIFO_EXIST,
                XPAR_SPI_IF_SPI_SLAVE_ONLY,
                XPAR_SPI_IF_NUM_SS_BITS
	}
};
*/

XSPI_Config XSPI_ConfigTable[] =
{
	{
		XPAR_SPI_IF_DEVICE_ID,
		0,
                XPAR_SPI_IF_FIFO_EXIST,
                XPAR_SPI_IF_SPI_SLAVE_ONLY,
                XPAR_SPI_IF_NUM_SS_BITS
	}
};

unsigned int Scratch[128];

unsigned int XSPIScratch[0x4000];

unsigned int cardNumber = 192;

extern int gtsCliSock;

extern int clientSetup (void);

extern void udpServer (void);

int main (int argc, char *argv[])
{
  FIRST_ARG = last_sentence_serial;

  memset(global_log,0,MAX_CHAR_LOG);

  memset(last_sentence_log,0,MAX_CHAR_LOG);

  memset(last_sentence_serial,0,MAX_CHAR_SERIAL);

  memset(global_output,0,MAX_CHAR_OUTPUT);

  memset(last_sentence_output,0,MAX_CHAR_OUTPUT);

  memset(file_name_output,0,MAX_CHAR_FILE_OUTPUT);

  dbgTermSet();
//  dbgNetSet();

  memset( (void *)&XMMRegsDriver, 0, sizeof( XMMRegs ) );

  memset( (void *)&XSPIDriver, 0, sizeof( XSPI ) );

  XMMRegs_ConfigTable[0].BaseAddress = (void *)(&Scratch[0]);

  XSPI_ConfigTable[0].BaseAddress = (void *)(&XSPIScratch[0]);

  XMMRegs_Initialize(&XMMRegsDriver, 0);

  XSPI_Initialize(&XSPIDriver, 0);

  gtsCliSock = clientSetup();

  XMMRegs_Reg_Init(&XMMRegsDriver);

  XMMRegs_RocketIO_RxSystem_Reset(&XMMRegsDriver, 0);

  logAnswer();

  udpServer();

  return 0;
}
